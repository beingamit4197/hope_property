#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const readline = require("readline");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

const question = (query) =>
  new Promise((resolve) => rl.question(query, resolve));

async function setupFirebase() {
  console.log("üî• Firebase Setup Helper");
  console.log("========================\n");

  console.log(
    "This script will help you set up your Firebase configuration.\n"
  );

  try {
    // Check if .env.local already exists
    const envPath = path.join(process.cwd(), ".env.local");
    if (fs.existsSync(envPath)) {
      const overwrite = await question(
        "‚ö†Ô∏è  .env.local already exists. Overwrite? (y/N): "
      );
      if (overwrite.toLowerCase() !== "y") {
        console.log("Setup cancelled.");
        process.exit(0);
      }
    }

    console.log("\nüìã Please provide your Firebase configuration:");
    console.log(
      "(You can find this in Firebase Console > Project Settings > General > Your apps)\n"
    );

    const apiKey = await question("API Key: ");
    const authDomain = await question("Auth Domain: ");
    const projectId = await question("Project ID: ");
    const storageBucket = await question("Storage Bucket: ");
    const messagingSenderId = await question("Messaging Sender ID: ");
    const appId = await question("App ID: ");

    // Validate required fields
    if (
      !apiKey ||
      !authDomain ||
      !projectId ||
      !storageBucket ||
      !messagingSenderId ||
      !appId
    ) {
      console.log("\n‚ùå All fields are required. Please try again.");
      process.exit(1);
    }

    // Create .env.local content
    const envContent = `# Firebase Configuration
# Generated by setup-firebase.js

VITE_FIREBASE_API_KEY=${apiKey}
VITE_FIREBASE_AUTH_DOMAIN=${authDomain}
VITE_FIREBASE_PROJECT_ID=${projectId}
VITE_FIREBASE_STORAGE_BUCKET=${storageBucket}
VITE_FIREBASE_MESSAGING_SENDER_ID=${messagingSenderId}
VITE_FIREBASE_APP_ID=${appId}

# Mapbox Configuration (optional)
# VITE_MAPBOX_ACCESS_TOKEN=your-mapbox-token
`;

    // Write .env.local file
    fs.writeFileSync(envPath, envContent);

    console.log("\n‚úÖ .env.local file created successfully!");
    console.log("\nüìù Next steps:");
    console.log("1. Restart your development server (npm start)");
    console.log("2. Go to /firebase-test to test your configuration");
    console.log(
      "3. Make sure to enable Authentication, Firestore, and Storage in Firebase Console"
    );
    console.log(
      "4. Set up security rules as described in FIREBASE_PROJECT_SETUP.md"
    );

    // Ask if they want to open Firebase Console
    const openConsole = await question("\nüåê Open Firebase Console? (y/N): ");
    if (openConsole.toLowerCase() === "y") {
      console.log("\nüîó Opening Firebase Console...");
      console.log("https://console.firebase.google.com/");
    }
  } catch (error) {
    console.error("\n‚ùå Setup failed:", error.message);
    process.exit(1);
  } finally {
    rl.close();
  }
}

// Run the setup
setupFirebase();
